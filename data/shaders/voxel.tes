#version 410 core

layout(triangles, ccw) in;

in TCSOut {
    vec3 color;
    vec2 texCoord;
} inData[];

out TESOut {
    vec3 color;
    vec2 texCoord;
} outData;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2)
{
    return vec4(gl_TessCoord.x) * v0 + vec4(gl_TessCoord.y) * v1 + vec4(gl_TessCoord.z) * v2;
}

void main()
{
	outData.texCoord = interpolate2D(inData[0].texCoord, inData[1].texCoord, inData[2].texCoord);
	outData.color = inData[0].color;

    gl_Position = interpolate4D(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position);


    // Displace the vertex along the normal
    //float Displacement = texture(gDisplacementMap, TexCoord_FS_in.xy).x;
    //WorldPos_FS_in += Normal_FS_in * Displacement * gDispFactor;
}